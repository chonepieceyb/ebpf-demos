/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __EMPTY_XDP_SKEL_H__
#define __EMPTY_XDP_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct empty_xdp {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *xdp_main;
	} progs;
	struct {
		struct bpf_link *xdp_main;
	} links;

#ifdef __cplusplus
	static inline struct empty_xdp *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct empty_xdp *open_and_load();
	static inline int load(struct empty_xdp *skel);
	static inline int attach(struct empty_xdp *skel);
	static inline void detach(struct empty_xdp *skel);
	static inline void destroy(struct empty_xdp *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
empty_xdp__destroy(struct empty_xdp *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
empty_xdp__create_skeleton(struct empty_xdp *obj);

static inline struct empty_xdp *
empty_xdp__open_opts(const struct bpf_object_open_opts *opts)
{
	struct empty_xdp *obj;
	int err;

	obj = (struct empty_xdp *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = empty_xdp__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	empty_xdp__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct empty_xdp *
empty_xdp__open(void)
{
	return empty_xdp__open_opts(NULL);
}

static inline int
empty_xdp__load(struct empty_xdp *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct empty_xdp *
empty_xdp__open_and_load(void)
{
	struct empty_xdp *obj;
	int err;

	obj = empty_xdp__open();
	if (!obj)
		return NULL;
	err = empty_xdp__load(obj);
	if (err) {
		empty_xdp__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
empty_xdp__attach(struct empty_xdp *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
empty_xdp__detach(struct empty_xdp *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *empty_xdp__elf_bytes(size_t *sz);

static inline int
empty_xdp__create_skeleton(struct empty_xdp *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "empty_xdp";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "xdp_main";
	s->progs[0].prog = &obj->progs.xdp_main;
	s->progs[0].link = &obj->links.xdp_main;

	s->data = (void *)empty_xdp__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *empty_xdp__elf_bytes(size_t *sz)
{
	*sz = 4736;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x80\x0c\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x18\0\
\x01\0\xb7\0\0\0\x01\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\x01\x11\x01\x25\x25\
\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\x06\x73\x17\0\0\x02\x34\0\
\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x03\x01\x01\x49\x13\0\0\
\x04\x21\0\x49\x13\x37\x0b\0\0\x05\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\0\x06\x24\0\
\x03\x25\x0b\x0b\x3e\x0b\0\0\x07\x04\x01\x49\x13\x03\x25\x0b\x0b\x3a\x0b\x3b\
\x05\0\0\x08\x28\0\x03\x25\x1c\x0f\0\0\x09\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\
\x19\x03\x25\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x0a\x05\0\x03\x25\x3a\
\x0b\x3b\x0b\x49\x13\0\0\x0b\x0f\0\x49\x13\0\0\x0c\x13\x01\x03\x25\x0b\x0b\x3a\
\x0b\x3b\x05\0\0\x0d\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x05\x38\x0b\0\0\x0e\x16\
\0\x49\x13\x03\x25\x3a\x0b\x3b\x0b\0\0\0\xc9\0\0\0\x05\0\x01\x08\0\0\0\0\x01\0\
\x0c\0\x01\x08\0\0\0\0\0\0\0\x02\x01\x10\0\0\0\x08\0\0\0\x02\x03\x2e\0\0\0\x01\
\x04\x02\xa1\0\x03\x3a\0\0\0\x04\x3e\0\0\0\x04\0\x05\x04\x06\x01\x06\x05\x08\
\x07\x07\x5c\0\0\0\x0c\x04\x02\x01\xaf\x08\x07\0\x08\x08\x01\x08\x09\x02\x08\
\x0a\x03\x08\x0b\x04\0\x05\x06\x07\x04\x09\x01\x10\0\0\0\x01\x5a\x0d\x01\x07\
\x78\0\0\0\x0a\x0f\x01\x07\x7c\0\0\0\0\x05\x0e\x05\x04\x0b\x81\0\0\0\x0c\x17\
\x18\x02\x4e\xb9\x0d\x10\xc4\0\0\0\x02\x4f\xb9\0\x0d\x12\xc4\0\0\0\x02\x50\xb9\
\x04\x0d\x13\xc4\0\0\0\x02\x51\xb9\x08\x0d\x14\xc4\0\0\0\x02\x52\xb9\x0c\x0d\
\x15\xc4\0\0\0\x02\x53\xb9\x10\x0d\x16\xc4\0\0\0\x02\x54\xb9\x14\0\x0e\x5c\0\0\
\0\x11\x02\x69\0\x64\0\0\0\x05\0\0\0\0\0\0\0\x25\0\0\0\x6d\0\0\0\xaf\0\0\0\xb8\
\0\0\0\xbd\0\0\0\xd1\0\0\0\xde\0\0\0\xea\0\0\0\xf3\0\0\0\xfc\0\0\0\x03\x01\0\0\
\x10\x01\0\0\x1b\x01\0\0\x24\x01\0\0\x28\x01\0\0\x2c\x01\0\0\x31\x01\0\0\x37\
\x01\0\0\x40\x01\0\0\x4a\x01\0\0\x5a\x01\0\0\x69\x01\0\0\x78\x01\0\0\x55\x62\
\x75\x6e\x74\x75\x20\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\
\x31\x34\x2e\x30\x2e\x30\x2d\x31\x75\x62\x75\x6e\x74\x75\x31\0\x2f\x68\x6f\x6d\
\x65\x2f\x63\x68\x6f\x6e\x65\x70\x69\x65\x63\x65\x79\x62\x2f\x43\x4f\x44\x49\
\x4e\x47\x2f\x57\x6f\x72\x6b\x53\x70\x61\x63\x65\x2f\x65\x62\x70\x66\x2d\x64\
\x65\x6d\x6f\x73\x2f\x73\x72\x63\x2f\x62\x70\x66\x5f\x6b\x65\x72\x6e\x2f\x65\
\x6d\x70\x74\x79\x5f\x78\x64\x70\x2e\x63\0\x2f\x68\x6f\x6d\x65\x2f\x63\x68\x6f\
\x6e\x65\x70\x69\x65\x63\x65\x79\x62\x2f\x43\x4f\x44\x49\x4e\x47\x2f\x57\x6f\
\x72\x6b\x53\x70\x61\x63\x65\x2f\x65\x62\x70\x66\x2d\x64\x65\x6d\x6f\x73\x2f\
\x62\x75\x69\x6c\x64\x2f\x73\x72\x63\x2f\x62\x70\x66\x5f\x6b\x65\x72\x6e\0\x5f\
\x6c\x69\x63\x65\x6e\x73\x65\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\
\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x69\x6e\x74\0\x58\x44\x50\x5f\x41\x42\x4f\x52\x54\x45\x44\0\x58\x44\
\x50\x5f\x44\x52\x4f\x50\0\x58\x44\x50\x5f\x50\x41\x53\x53\0\x58\x44\x50\x5f\
\x54\x58\0\x58\x44\x50\x5f\x52\x45\x44\x49\x52\x45\x43\x54\0\x78\x64\x70\x5f\
\x61\x63\x74\x69\x6f\x6e\0\x78\x64\x70\x5f\x6d\x61\x69\x6e\0\x69\x6e\x74\0\x63\
\x74\x78\0\x64\x61\x74\x61\0\x5f\x5f\x75\x33\x32\0\x64\x61\x74\x61\x5f\x65\x6e\
\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\
\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\
\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x78\x64\
\x70\x5f\x6d\x64\0\x14\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x0c\x01\0\0\x0c\x01\0\0\x01\x01\0\0\0\0\0\0\0\
\0\0\x02\x02\0\0\0\x01\0\0\0\x06\0\0\x04\x18\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\
\x0d\0\0\0\x03\0\0\0\x20\0\0\0\x16\0\0\0\x03\0\0\0\x40\0\0\0\x20\0\0\0\x03\0\0\
\0\x60\0\0\0\x30\0\0\0\x03\0\0\0\x80\0\0\0\x3f\0\0\0\x03\0\0\0\xa0\0\0\0\x4e\0\
\0\0\0\0\0\x08\x04\0\0\0\x54\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\
\0\x0d\x06\0\0\0\x61\0\0\0\x01\0\0\0\x65\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\
\x69\0\0\0\x01\0\0\x0c\x05\0\0\0\xd7\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\
\0\0\0\0\0\x03\0\0\0\0\x08\0\0\0\x0a\0\0\0\x04\0\0\0\xdc\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\0\xf0\0\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\0\xf9\0\0\0\x01\0\0\x0f\0\
\0\0\0\x0b\0\0\0\0\0\0\0\x04\0\0\0\0\x78\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\
\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\
\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\
\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\
\x6e\x64\x65\x78\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x69\x6e\x74\0\x63\x74\x78\0\x69\x6e\x74\0\x78\x64\x70\x5f\x6d\x61\x69\x6e\0\
\x78\x64\x70\0\x2f\x68\x6f\x6d\x65\x2f\x63\x68\x6f\x6e\x65\x70\x69\x65\x63\x65\
\x79\x62\x2f\x43\x4f\x44\x49\x4e\x47\x2f\x57\x6f\x72\x6b\x53\x70\x61\x63\x65\
\x2f\x65\x62\x70\x66\x2d\x64\x65\x6d\x6f\x73\x2f\x73\x72\x63\x2f\x62\x70\x66\
\x5f\x6b\x65\x72\x6e\x2f\x65\x6d\x70\x74\x79\x5f\x78\x64\x70\x2e\x63\0\x20\x20\
\x20\x20\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x58\x44\x50\x5f\x44\x52\
\x4f\x50\x3b\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\
\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x6c\x69\
\x63\x65\x6e\x73\x65\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\
\0\x1c\0\0\0\x30\0\0\0\0\0\0\0\x08\0\0\0\x72\0\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\
\x10\0\0\0\x72\0\0\0\x01\0\0\0\0\0\0\0\x76\0\0\0\xbe\0\0\0\x09\x24\0\0\x0c\0\0\
\0\xff\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x82\0\0\0\x05\0\x08\0\x65\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\
\x01\x01\x01\x01\0\0\0\x01\0\0\x01\x01\x01\x1f\x02\0\0\0\0\x42\0\0\0\x03\x01\
\x1f\x02\x0f\x05\x1e\x03\x71\0\0\0\0\x24\x4f\x52\xf9\x95\xfb\0\xa6\xc5\x32\xa2\
\x8c\x6b\xac\x0a\x56\xb9\0\0\0\x01\x24\x4f\x52\xf9\x95\xfb\0\xa6\xc5\x32\xa2\
\x8c\x6b\xac\x0a\x56\xd2\0\0\0\x01\xff\x15\x69\x73\x71\x30\x3f\x30\x77\x73\x9a\
\x8d\x3b\x63\xbe\x09\0\x09\x02\0\0\0\0\0\0\0\0\x18\x05\x09\x0a\x14\x02\x02\0\
\x01\x01\x2f\x68\x6f\x6d\x65\x2f\x63\x68\x6f\x6e\x65\x70\x69\x65\x63\x65\x79\
\x62\x2f\x43\x4f\x44\x49\x4e\x47\x2f\x57\x6f\x72\x6b\x53\x70\x61\x63\x65\x2f\
\x65\x62\x70\x66\x2d\x64\x65\x6d\x6f\x73\x2f\x62\x75\x69\x6c\x64\x2f\x73\x72\
\x63\x2f\x62\x70\x66\x5f\x6b\x65\x72\x6e\0\x2f\x68\x6f\x6d\x65\x2f\x63\x68\x6f\
\x6e\x65\x70\x69\x65\x63\x65\x79\x62\x2f\x43\x4f\x44\x49\x4e\x47\x2f\x57\x6f\
\x72\x6b\x53\x70\x61\x63\x65\x2f\x65\x62\x70\x66\x2d\x64\x65\x6d\x6f\x73\0\x2f\
\x68\x6f\x6d\x65\x2f\x63\x68\x6f\x6e\x65\x70\x69\x65\x63\x65\x79\x62\x2f\x43\
\x4f\x44\x49\x4e\x47\x2f\x57\x6f\x72\x6b\x53\x70\x61\x63\x65\x2f\x65\x62\x70\
\x66\x2d\x64\x65\x6d\x6f\x73\x2f\x73\x72\x63\x2f\x62\x70\x66\x5f\x6b\x65\x72\
\x6e\x2f\x65\x6d\x70\x74\x79\x5f\x78\x64\x70\x2e\x63\0\x73\x72\x63\x2f\x62\x70\
\x66\x5f\x6b\x65\x72\x6e\x2f\x65\x6d\x70\x74\x79\x5f\x78\x64\x70\x2e\x63\0\x73\
\x72\x63\x2f\x62\x70\x66\x5f\x6b\x65\x72\x6e\x2f\x76\x6d\x6c\x69\x6e\x75\x78\
\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb9\0\0\0\x04\0\
\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0a\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\
\0\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x13\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\0\0\0\
\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x8f\0\0\0\x11\0\x04\0\0\0\0\0\0\
\0\0\0\x04\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x03\0\0\0\x11\0\0\0\0\0\0\
\0\x03\0\0\0\x04\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x1f\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x0c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x14\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x1c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x24\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x2c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x34\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x3c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x44\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x4c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x54\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x58\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x5c\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x64\0\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x0b\0\0\0\x10\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\x1c\x01\0\0\0\0\0\0\x04\0\0\0\x0b\0\0\0\x2c\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\
\x03\0\0\0\x09\0\0\0\x26\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x32\0\0\0\0\0\0\0\
\x03\0\0\0\x09\0\0\0\x47\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x5c\0\0\0\0\0\0\0\
\x03\0\0\0\x09\0\0\0\x74\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0a\x0b\0\x2e\x64\
\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\x72\
\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\
\x67\x5f\x73\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\x73\0\x2e\x64\x65\x62\x75\x67\
\x5f\x73\x74\x72\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\
\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x61\x64\x64\x72\0\x78\x64\x70\0\
\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x78\x64\x70\x5f\
\x6d\x61\x69\x6e\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\
\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\
\x69\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\
\0\x65\x6d\x70\x74\x79\x5f\x78\x64\x70\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\
\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc5\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xa2\x0b\0\0\0\0\0\0\xde\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x64\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x10\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\0\0\0\x01\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x54\0\0\0\0\0\0\0\xbd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6c\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x11\x01\0\0\0\0\0\0\xcd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x68\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x09\0\
\0\0\0\0\0\x40\0\0\0\0\0\0\0\x17\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\x26\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xde\x01\0\0\0\0\0\0\
\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x09\0\0\0\0\0\0\x80\x01\0\0\0\
\0\0\0\x17\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x39\0\0\0\x01\0\
\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x46\x02\0\0\0\0\0\0\x7f\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x58\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xc5\x03\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x54\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xd0\x0a\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x17\0\0\0\x0b\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\xd9\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xe0\x03\0\0\0\0\0\0\x25\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xd5\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x0a\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x17\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x06\0\0\0\0\0\0\
\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\0\0\0\x20\0\0\0\0\0\0\
\0\x17\0\0\0\x0f\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xac\0\0\0\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\x06\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x20\x0b\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x17\0\0\0\x11\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x9c\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x80\x06\0\0\0\0\0\0\x86\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\
\x0b\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x17\0\0\0\x13\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x44\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\x07\0\0\
\0\0\0\0\xe9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\x81\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x0b\0\0\0\0\0\
\0\x02\0\0\0\0\0\0\0\x17\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcd\0\
\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x07\0\0\0\0\0\0\x20\x01\0\0\
\0\0\0\0\x01\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct empty_xdp *empty_xdp::open(const struct bpf_object_open_opts *opts) { return empty_xdp__open_opts(opts); }
struct empty_xdp *empty_xdp::open_and_load() { return empty_xdp__open_and_load(); }
int empty_xdp::load(struct empty_xdp *skel) { return empty_xdp__load(skel); }
int empty_xdp::attach(struct empty_xdp *skel) { return empty_xdp__attach(skel); }
void empty_xdp::detach(struct empty_xdp *skel) { empty_xdp__detach(skel); }
void empty_xdp::destroy(struct empty_xdp *skel) { empty_xdp__destroy(skel); }
const void *empty_xdp::elf_bytes(size_t *sz) { return empty_xdp__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
empty_xdp__assert(struct empty_xdp *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __EMPTY_XDP_SKEL_H__ */
